
Una de les claus de l'èxit, que considero que ha de tenir tot bon programador/a és la capacitat de pensar com tal. Segur que si as estat algun dia durant una ona llarga estona treballant en codi, un cop hagis desconnectat i sortit al món real, moltes de les coses que veus ja no són com abans, en el sentit de com perceps el món. Per exemple quan has d'obrir la nevera per agafar un got d’aigua, en la ment d’un programador es pot interpretar de manera que si vull veure es han de complir diferents condicions, a l'igual que els (if) en alguns llenguatges. El fet que determina la capacitat per desenvolupar un bon tros de codi amb consistència, i capaç cobrir la necessitat d’allò que se'ns requereix serà molt més practic i senzill per aquells desenvolupadors amb una ment que tingui aquest tipus d’enfocament. És per això que alguns llenguatges de programació tal com és el Python que tractarem en aquesta unitat, tambè te la seva pròpia filosofia. KISS i DRY són dos dels principis més importants del desenvolupament de software, i els que venim a conneixer per començar amb la iniciació del Python.

KISS és l’acrònim de (“Keep it simple, Stupid!”), aquest prinicipi preten transmetre es que qualsevol sistema va a funcionar millor si es manté senzill que si es torna complex. És dir que la simplicitat ha de ser una meta en el desenvolupament i que la complexitat innecessària ha de ser eliminada. Si es pot fer alguna cosa per reduir-ne la complexitat, endavant. Es poden dividir els problemes en altres de més simples, més llegibles, fer funcions, objectes, noms de variables simples, eliminar tot l'innecessari.

DRY és l’acronim de (“Don’t repeat yourself”), i tal com el seu propi ens dona a entendre aquesta promou la forma òptima en la que desenvolupem el nostre codi. Aquest pretén que cada peça de funcionalitat ha de tenir una única, no ambigua i representativa identitat dins del sistema. Si apliquem aquest principi de forma correcta un canvi en qualsevol part de la funcionalitat d'un programa no inclou canvis en parts que no tinguin una relació lògica amb la funcionalitat canviada. Bàsicament, el que s'intenta evitar amb aquest principi és que no es dupliqui el codi, perquè el que passa després que el manteniment serà molt més difícil, ja que no sabrem on hem de canviar coses perquè no estan clarament definides.